
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_stepsize_influence.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_stepsize_influence.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_stepsize_influence.py:


=======================================================
Influence of primal-dual stepsizes for support recovery
=======================================================

This example shows that using a smaller dual stepsize slows down convergence,
but is beneficial for support recovery.

.. GENERATED FROM PYTHON SOURCE LINES 9-23

.. code-block:: default


    import numpy as np
    from numpy.linalg import norm
    import matplotlib.pyplot as plt
    from sklearn.metrics import f1_score
    from celer.datasets import make_correlated_data
    from celer.homotopy import celer_path

    from iterreg.ell1 import dual_primal


    n_samples = 500
    n_features = 1_000








.. GENERATED FROM PYTHON SOURCE LINES 24-25

The function to compute CP, Lasso path and plot metrics:

.. GENERATED FROM PYTHON SOURCE LINES 25-75

.. code-block:: default



    def plot_varying_sigma(corr, density, snr, steps, max_iter=100):
        A, b, x_true = make_correlated_data(
            n_samples=n_samples, n_features=n_features, density=density,
            corr=corr, snr=snr, random_state=0)

        print('Starting computation for this setting')
        fig, axarr = plt.subplots(3, 2, sharey='row', sharex='col',
                                  figsize=(7, 5), constrained_layout=True)

        fig.suptitle(r"Correlation=%.1f, $||x^*||_0$= %s, snr=%s" %
                     (corr, (x_true != 0).sum(), snr))

        for i, step in enumerate(steps):
            _, _, _, all_x = dual_primal(
                A, b, step=step, ret_all=True, max_iter=max_iter, f_store=1)
            scores = [f1_score(x != 0, x_true != 0) for x in all_x]
            supp_size = np.sum(all_x != 0, axis=1)

            axarr[0, 0].plot(scores, label=r"$\sigma=1 /%d ||A||$" % step)
            axarr[1, 0].semilogy(supp_size)
            axarr[2, 0].plot(norm(all_x - x_true, axis=1))

        axarr[0, 0].set_ylim(0, 1)
        axarr[0, 0].set_ylabel('F1 score for support')
        axarr[1, 0].set_ylabel(r"$||x_k||_0$")
        axarr[2, 0].set_ylabel(r'$\Vert x_k - x^*\Vert$')
        axarr[2, 0].set_xlabel("CP iteration")
        axarr[0, 0].legend()
        axarr[0, 0].set_title('Iterative regularization')

        # last column: Lasso results
        alphas = norm(A.T @ b, ord=np.inf) / len(b) * np.geomspace(1, 1e-3)

        coefs = celer_path(A, b, 'lasso', alphas=alphas)[1].T
        axarr[0, 1].semilogx(
            alphas, [f1_score(coef != 0, x_true != 0) for coef in coefs])
        axarr[1, 1].semilogx(
            alphas, [np.sum(coef != 0) for coef in coefs])
        axarr[2, 1].semilogx(
            alphas, [norm(coef - x_true) for coef in coefs])

        for i in range(3):
            axarr[i, 1].set_xlim(*axarr[i, 1].get_xlim()[::-1])
        axarr[2, 1].set_xlabel(r'$\lambda$')
        axarr[0, 1].set_title("Lasso path")
        plt.show(block=False)









.. GENERATED FROM PYTHON SOURCE LINES 76-77

Noiseless case where RIP holds (L1 sol = L0 sol)

.. GENERATED FROM PYTHON SOURCE LINES 77-82

.. code-block:: default

    density = 0.01
    corr = 0.
    snr = np.inf

    plot_varying_sigma(corr, density, snr, [2, 10, 100], max_iter=100)



.. image:: /auto_examples/images/sphx_glr_plot_stepsize_influence_001.png
    :alt: Correlation=0.0, $||x^*||_0$= 10, snr=inf, Iterative regularization, Lasso path
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Starting computation for this setting




.. GENERATED FROM PYTHON SOURCE LINES 83-84

A different setting, with more correlation in A but still noiseless

.. GENERATED FROM PYTHON SOURCE LINES 84-91

.. code-block:: default


    corr = 0.5
    snr = np.inf
    density = 0.1
    plot_varying_sigma(corr, density, snr, [2, 10, 100], max_iter=100)





.. image:: /auto_examples/images/sphx_glr_plot_stepsize_influence_002.png
    :alt: Correlation=0.5, $||x^*||_0$= 100, snr=inf, Iterative regularization, Lasso path
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Starting computation for this setting




.. GENERATED FROM PYTHON SOURCE LINES 92-93

Now if in addition x_true is less sparse, L1 solution is no longer L0 sol

.. GENERATED FROM PYTHON SOURCE LINES 93-101

.. code-block:: default


    corr = 0.5
    snr = np.inf
    density = 0.5

    plot_varying_sigma(corr, density, snr, [2, 10, 100], max_iter=100)





.. image:: /auto_examples/images/sphx_glr_plot_stepsize_influence_003.png
    :alt: Correlation=0.5, $||x^*||_0$= 500, snr=inf, Iterative regularization, Lasso path
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Starting computation for this setting




.. GENERATED FROM PYTHON SOURCE LINES 102-103

Finally, when there is noise in the data:

.. GENERATED FROM PYTHON SOURCE LINES 103-108

.. code-block:: default

    corr = 0.2
    density = 0.1
    snr = 10

    plot_varying_sigma(corr, density, snr, [2, 10, 100], max_iter=100)



.. image:: /auto_examples/images/sphx_glr_plot_stepsize_influence_004.png
    :alt: Correlation=0.2, $||x^*||_0$= 100, snr=10, Iterative regularization, Lasso path
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Starting computation for this setting





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  15.517 seconds)


.. _sphx_glr_download_auto_examples_plot_stepsize_influence.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_stepsize_influence.py <plot_stepsize_influence.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_stepsize_influence.ipynb <plot_stepsize_influence.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
